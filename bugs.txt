3/19, Sudo Make Exception
    E: make dep works, but sudo make gives error saying "./debug.sh does not exist"
    F: Ran command "dos2unix debug.sh" and rebooted vm and compiled fine.

3/19, Error: no such instruction 
    E: All functions defined in idt.h file have error "no such instruction"
    F: Wrapped function header portion of file in "#ifndef ASM" then "define ASM 1", and "endif" at end

3/19, "Warning: initializer-string for any array of chars is too long"
    E: Repeated error in idt.c file, but array declaration seems fine 
    F: Bounds of array were flipped

3/19, Exception_Linkage.S compilation error 
    E: After running sudo make, keep getting error "no such instruction." in Exception_Linkage.S. Diff from " Error: no such instruction" 
    F: Included "Exception_Linkage.h" inside Exception_Linkage.S file, but errors gone once removed.

3/19, Test case does not get reached 
    E: Test case is not even called, but something works when function call for init_idt  is commented out.
    F: Was not updating seg_selector of each idt. For each idt from 0 to 255, set seg_selector to KERNEL_CS using: idt[i].seg_selector = KERNEL_CS;

3/20, Print for division error test case not even shown 
    E: There is no indication on the screen that the test case was failed, and a /0 error has happened.
    F: Added a while(1) loop after print, so that the error message is hard coded to screen.

3/20, When page is initalized, division error was not working 
    E: Narrowed it down to assembly in pagingasm.S, something wrong with cr0 maybe
    F: Set page table addr to 0xb8 instead of 0 and it worked

3/20, Cannot see 2 allocated memories when using info mem 
    E: Issue is likely with offsets in pagingasm.S.
    F: Offset for OR cr0 is should be 0x80000001 not 0x80000000;

3/20,
    The first bug was in initializing the PIC. The incorrect implementation would cause the program to crash. This was fixed
    by allowing interrups after they were masked for initializing

3/21,
    The second bug was in the keyboard interrupt handler when masking was used. The mask was sent to the slave pic by accident.
    This was fixed by updating the address for the output 

3/21,
    This bug occured because the keyboard would print the pressed and depressed outputs. This was fixed by adding a range check
    to ensure that only presses are printed
________________________________________________________________________________________________________
3/24,
    E: RTC read not allowing for read. After GDB, did not get to end
    F: Did not need the if statement before. More importantly, did not set interrupt flag to 0. 
    This is because you are interrupting when doing RTC read, so you can clear interrupt flag.

3/24,
    E: rtc_open and rtc_write not setting frequency, not sure what issue is
    F: cli() and sti() are in the wrong order lol

3/25,
    E: Getting a "not checking for void pointer bug" in rtc.c in rtc_write
    F: Added a conditional to test if given buffer has is void if dereferenced

3/24,
    E: Issue with figuring out indexing of data block vs actual data
    F: Since each data block has 4096 bytes, I iterated through each byte to read and indexed the inode using I / 4096 and each byte in a data block with I % 4096   

3/25,
    E: rtc_write does not set frequency for certain values of i
    F: Test case was iterating through all i from 0 t0 20, but the helper function rtc_logbase2 was not accounting for frequencies that were not multiples of two.

3/25,
    E: test case for rtc is not showing i each time rtc is called, and function header interferes with prints
    F: Moved the tests into rtc_handler by adding terminal_write(0,"123",3); to print 3

3/24,
    E: when the terminal is opened and text is printed off the edge it would overwrite its own section of text instead of the next line
    F: This was fixed by incermenting screen y by one everytime it reaches the end of a line and resets screen x to 0

3/25,
    E: Terminal read would read in all characters correctly except the first character
    F: This was fixed by replacing the new line char at the end to null so it can properly print all the chars from the line


3/26,
    E: Figure out how go through each file in a directory incrementally
    F:Had a global variable called file position which was incremented each time read was called to respectively go through each directory in the boot block

3/26,
    E: When reading from a file random characters were getting copied onto the screen
    F: Had to allocate additional space in the buffer to account for an end of string character as the character is needed to properly print a string to the screen

________________________________________________________________________________________________________
CP3:

4/9,
    E: User 4MB page is not working/ not found by compiler with info mem
    F: We used i=2 instead of i=32 for paging set up.
4/9,
    E: User page is giving general protection fault when running any commands
    F: Did not set user privilege bit in paging.c setup
4/9,
    E: flushtlb is not being reached / run
    F: Stack setup was probably incorrect, moved assembly into syscall.c using inline assembly
4/9,
    E: Compilation error, we have seen this before for using incorrect includes
    F: Added infned and endifs, and compiled
4/10,
    E: Another compilation error, something wrong with .o files
    F: Assembly file had same name as c/h file, changed name and compiled fine

4/10,
    E: Another compilation error, something wrong with .o files
    F: Assembly file had same name as c/h file, changed name and compiled fine

4/10,
    E: After GDB, iret in execute does not return properly 
    F: Using wrong offsets for User CS/DS stuff, copied addr from x86_desc.h and works

4/10,
    E: EIP is not correct after stepping through it 
    F: Calculated EIP wrong, accessed wrong elements of entry_pt array, went backwards

4/10,
    E: Program is not getting the correct return values 
    F: Directory read did not return the correct values

4/11,
    E: TA said Terminal should not be interrupting every time  
    F: Did not interrupt everytime key was pressed, only after enter pressed

4/11,
    E: After above fix, only one char shows up when command typed  
    F: Updated terminal write to add char within buffer before enter pressed

4/11,
    E: Spaces before command does not work  
    F: Added logic to allow spaces before and after commant (will just be ignored)

4/11,
    E: Spaces before command does not work  
    F: Added logic to allow spaces before and after commant (will just be ignored)

4/11,
    E: Halt is running twice for some reason  
    F: In halt, we reset all pid flags to 0. after commented out, works as intended

________________________________________________________________________________________________________
CP4:

4/14,
    E: Pingpong not working  
    F: Scrolling was not working as intended, screen_y was being incremented twice

4/14,
    E: Pingpong accepts text when running  
    F: Disabled text input whenever pingpong was called

4/15,
    E: Vidmap address not correct, page fault  
    F: Confirmed addr was wrong by printing addr where PF occours, and corrected it to be 0x8800000

4/15,
    E: Flags should be cleared in halt, but when uncommented, does not work  
    F: was using PID+1 in halt, should only be halting current shell

4/15,
    E: Only two shells are running, third is not able to run command  
    F: Increased array of PID to allow for last shell to run command

4/16,
    E: Grep does not work after other programs were run  
    F: Was not clearing arg buffer, noticed after gdb into getargs function

4/17,
    E: cat into verylongtext file was not working, no file found  
    F: Was adding null char to already full buffer, and file dir read/open was looking for null char but it cannot fit, so removed those error checks

4/17,
    E: cat with no args does should say no args but does not  
    F: Added coniditional to the read/write so that if file name len to be read is 0, return -1

________________________________________________________________________________________________________
CP5:

4/25,
    E: Whenever the pcb and parent id variable were changed, the terminal wouldn't accept input anymore
    F: We didn't send an EOI before executing the first three shells 

4/25,
    E: The asm in pit.c was causing a bootloop error 
    F: There was no leave or ret in the asm causing this error

4/25,
    E: There were too many shells opening and after using gdb we found four shells had initially opened
    F: In kernerl.C we had an additional execute shell command but the schedule is supposed to execute shell instead

4/26,
    E: Whenever three shells were open, the second and third terminal didn't have the opening message for shells "Starting 391 Shell" 
    F: We weren't terminal switch before executing a new shell

4/26,
    E: When two shells were open in each terminal we able to exit out of more shells than existed in that terminal
    F: We setup an array with a count of how many shells were in each terminal and we added to conditional in halt to check if there were no shells executing in the current Terminal

4/26,
    E: If there were a certain amount of shells running in the terminal, we weren't able to exit out of all of them
    F: In execute we were not updating the parent processes correctly and the parent pid value was one higher than it was supposed to be so we decremented it

4/26,
    E: Fish was giving a general protection fault after we implemented multiple shells 
    F: We were incermenting the scheduled terminal before executing a shell so we moved it after

4/29,
    E: When shell exit is called it wouldn't return to the parent shell
    F: We incremented the current shell in execute 

4/29,
    E: Cat RTC didn't work 
    F: We virtualized the RTC by using global counter variable to keep track of the desired frequency

4/29,
    E: The RTC was too slow and fish was not animating at the correct speed
    F: The RTC handler was not manipulating the counter correctly and was not setting the interrupt flag at the correct location
       We decremented the counter and set the interrupt flag to one if counter was greater than the frequency

4/30,
    E: When shell exit is called it wouldn't return to the parent shell
    F: We incremented the current shell in execute 
